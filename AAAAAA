
// t_cmd	*parser(t_token *tokens)
// {
// 	t_cmd	*head;
// 	t_cmd	*current;
// 	t_cmd	*new;
// 	int		i;

// 	head = NULL;
// 	current = NULL;
// 	while (tokens)
// 	{
// 		new = new_cmd();
// 		if (!head)
// 			head = new;
// 		else
// 			current->next = new;
// 		current = new;
// 		current->args = malloc(sizeof(char *) * (count_args(tokens) + 1));
// 		i = 0;
// 		while (tokens && tokens->type != PIPE)
// 		{
// 			if (tokens->type == WORD)
// 				current->args[i++] = strdup(tokens->value);
// 			else if (tokens->type == REDIR_IN)
// 			{
// 				tokens = tokens->next;
// 				if (tokens)
// 					current->input_file = strdup(tokens->value);
// 			}
// 			else if (tokens->type == REDIR_HEREDOC)
// 			{
// 				tokens = tokens->next;
// 				if (tokens)
// 				{
// 					current->heredoc_delim = ft_strdup(tokens->value);
// 					current->has_heredoc = 1;
// 				}
// 			}
// 			else if (tokens->type == REDIR_OUT)
// 			{
// 				tokens = tokens->next;
// 				if (tokens)
// 				{
// 					current->output_file = strdup(tokens->value);
// 					current->append = 0;
// 				}
// 			}
// 			else if (tokens->type == REDIR_APPEND)
// 			{
// 				tokens = tokens->next;
// 				if (tokens)
// 				{
// 					current->output_file = strdup(tokens->value);
// 					current->append = 1;
// 				}
// 			}
// 			tokens = tokens->next;
// 		}
// 		current->args[i] = NULL;
// 		if (current->args[0]
// 			&& (!strcmp(current->args[0], "cd")
// 				|| !ft_strcmp(current->args[0], "echo")
// 				|| !ft_strcmp(current->args[0], "env")
// 				|| !ft_strcmp(current->args[0], "exit")
// 				|| !ft_strcmp(current->args[0], "export")
// 				|| !ft_strcmp(current->args[0], "unset")
// 				|| !ft_strcmp(current->args[0], "pwd")))
// 			current->type = CMD_BUILTNS;
// 		else
// 			current->type = CMD_EXTERNAL;
// 		if (tokens && tokens->type == PIPE)
// 			tokens = tokens->next;
// 	}
// 	return (head);
// }
